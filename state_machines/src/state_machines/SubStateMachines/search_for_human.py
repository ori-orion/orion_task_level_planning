from state_machines.Reusable_States.include_all import *;

"""
Spin on the spot and then query for the humans you saw since you started spinning.
"""
def create_search_for_human(start_with_nav:bool = True):
    """
    For searching for humans in a given room.
    This will prioritise humans that haven't been spoken to, and then go to the operators that are closer to you.
    Note that this doesn't speak to the humans, and so doesn't fill in any of the more interesting information (such as name).
        Nor does it input anything into the SOM system. It just gives the Human record generated by the recognition system.
    Note also that there are two navigational systems in place, only one of which is currently in use. 
        centre_of_room_pose and room_node_uid correspond to the move_base and topological node navigation respectively.
    Inputs:
        centre_of_room_pose:Pose        - The pose we are navigating to in the middle of the room to perform the search.
        room_node_uid:str               - The room node id for the room we want to search in.
        failure_threshold               - the number of cumulative failures required to return the repeat_failure outcome
        prev_node_nav_to                - This is something used by any of the topological nodes. Unimportant for the purposes of this specifically.
        approximate_operator_pose:Pose  - What is the approximate operator pose? This will be used to identify the operator out of all the humans observed.
    Outputs:
        operator_pose:Pose        - The position of the operator.
        guest_list:Human[]        - An array with all the guests on it.        
    """

    sub_sm = smach.StateMachine(
        outcomes=[SUCCESS, FAILURE, 'one_person_found'],
        input_keys=[
            'centre_of_room_pose', 'room_node_uid', 'failure_threshold', 'prev_node_nav_to',
            'approximate_operator_pose'],
        output_keys=[
            'operator_pose', 'guest_list']);
                        
    sub_sm.userdata.number_of_failures = 0;

    sub_sm.userdata.nearest_to = None;

    with sub_sm:

        if start_with_nav:
            smach.StateMachine.add(
                'NavToCentreOfRoom',
                SimpleNavigateState(),
                transitions={
                    SUCCESS:'CreateHumanQuery',
                    FAILURE:'NavToCentreOfRoom',
                    REPEAT_FAILURE: FAILURE},
                remapping={'pose':'centre_of_room_pose'});

        #region Assumes existence of the topological nodes.
        # smach.StateMachine.add(
        #     'NavToNearestNode',
        #     TopologicalNavigateState(stop_repeat_navigation=True),
        #     transitions={
        #         SUCCESS:'CreateHumanQuery',
        #         FAILURE:'NavToNearestNode',
        #         'repeat_failure':FAILURE},
        #     remapping={'node_id':'room_node_uid'});
        #endregion

        smach.StateMachine.add(
            'CreateHumanQuery',
            CreateSOMQuery(
                CreateSOMQuery.HUMAN_QUERY, 
                save_time=True),
            transitions={
                SUCCESS: 'SpinOnSpot'},
            remapping={});
        
        smach.StateMachine.add(
            'SpinOnSpot',
            SpinState(),
            transitions={
                SUCCESS:'QueryForHumans'},
            remapping={});

        smach.StateMachine.add(
            'QueryForHumans',
            PerformSOMQuery(),
            transitions={
                SUCCESS:'FindMyMatesOperatorDetection',
                FAILURE:FAILURE},
            remapping={});

        smach.StateMachine.add(
            'FindMyMatesOperatorDetection',
            FindMyMates_IdentifyOperatorGuests(),
            transitions={
                SUCCESS:SUCCESS,
                FAILURE:FAILURE,
                'one_person_found':'one_person_found'},
            remapping={});

    return sub_sm;

if __name__ == '__main__':
    rospy.init_node('search_for_human_test');
    
    sub_sm = create_search_for_human(False);

    sub_sm.execute();
    
    rospy.spin();

