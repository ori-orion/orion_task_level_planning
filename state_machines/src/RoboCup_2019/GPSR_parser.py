#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class GPSRBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace="\t\n.',",
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        namechars='',
        **kwargs
    ):
        super(GPSRBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class GPSRParser(Parser):
    def __init__(
        self,
        whitespace="\t\n.',",
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=GPSRBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(GPSRParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _s_(self):
        self._start_()
        self._check_eof()

    @graken()
    def _start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._pmain_()
                with self._option():
                    self._main_()
                self._error('no available options')

    @graken()
    def _pmain_(self):
        self._polite_()
        self._token(' ')
        self._main_()

    @graken()
    def _main_(self):
        with self._choice():
            with self._option():
                self._fndppl_()
            with self._option():
                self._fndobj_()
            with self._option():
                self._guide_()
            with self._option():
                self._follow_()
            with self._option():
                self._followout_()
            with self._option():
                self._incomplete_()
            with self._option():
                self._man_()
            with self._option():
                self._complexman_()
            with self._option():
                self._partyhost_()
            self._error('no available options')

    @graken()
    def _polite_(self):
        with self._choice():
            with self._option():
                self._token('please')
            with self._option():
                self._token('could you')
            with self._option():
                self._token('robot please')
            with self._option():
                self._token('could you please')
            self._error('expecting one of: could you could you please please robot please')

    @graken()
    def _fndppl_(self):
        with self._choice():
            with self._option():
                self._token('tell me the ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('name')
                        with self._option():
                            self._token('gender')
                        with self._option():
                            self._token('pose')
                        self._error('expecting one of: gender name pose')
                self._token(' of the person at the ')
                self._beacon_()
            with self._option():
                self._token('tell me the ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('name')
                        with self._option():
                            self._token('gender')
                        with self._option():
                            self._token('pose')
                        self._error('expecting one of: gender name pose')
                self._token(' of the person in the ')
                self._room_()
            with self._option():
                self._token('tell me how many people in the ')
                self._room_()
                self._token(' are ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pgenderp_()
                        with self._option():
                            self._pose_()
                        self._error('no available options')
            with self._option():
                self._talk_()
                self._token(' to ')
                self._whowhere_()
            with self._option():
                self._findp_()
                self._token(' in the ')
                self._room_()
                self._token(' and ')
                self._talk_()
            with self._option():
                self._goroom_()
                self._token(' ')
                self._findp_()
                self._token(' and ')
                self._talk_()
            self._error('no available options')

    @graken()
    def _fndobj_(self):
        with self._choice():
            with self._option():
                self._vbfind_()
                self._token(' the ')
                self._category_()
                self._token(' in the ')
                self._room_()
            with self._option():
                self._token('tell me how many ')
                self._category_()
                self._token(' there are on the ')
                self._placement_()
            with self._option():
                self._token('tell me whats the ')
                self._oprop_()
                self._token(' object on the ')
                self._placement_()
            with self._option():
                self._token('tell me whats the ')
                self._oprop_()
                self._token(' ')
                self._category_()
                self._token(' on the ')
                self._placement_()
            with self._option():
                self._vbfind_()
                self._token(' the ')
                self._category_()
                self._token(' in the ')
                self._room_()
            with self._option():
                self._token('tell me which are the three ')
                self._oprop_()
                self._token(' ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('objects')
                        with self._option():
                            self._category_()
                        self._error('expecting one of: objects')
                self._token(' on the ')
                self._placement_()
            with self._option():
                self._vbfind_()
                self._token(' three ')
                self._category_()
                self._token(' in the ')
                self._room_()
            with self._option():
                self._token('tell me how many ')
                self._object_()
                self._token(' there are on the ')
                self._placement_()
            with self._option():
                self._vbfind_()
                self._token(' the ')
                self._object_()
                self._token(' in the ')
                self._room_()
            self._error('no available options')

    @graken()
    def _guide_(self):
        self._gdcmd_()

    @graken()
    def _follow_(self):
        with self._choice():
            with self._option():
                self._vbfollow_()
                self._token(' ')
                self._name_()
                self._token(' from the ')
                self._beacon_()
                self._token(' to the ')
                self._room_()
            with self._option():
                self._token('meet ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' and ')
                self._vbfollow_()
                self._token(' ')
                self._pron_()
                self._token(' ')
                self._fllwdest_()
            with self._option():
                self._gobeacon_()
                self._token(' meet ')
                self._name_()
                self._token(' and ')
                self._vbfollow_()
                self._token(' ')
                self._pron_()
            self._error('no available options')

    @graken()
    def _followout_(self):
        with self._choice():
            with self._option():
                self._token('meet ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' ')
                self._vbfollow_()
                self._token(' ')
                self._pron_()
                self._token(' and ')
                self._goroom_()
            with self._option():
                self._token('meet ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' ')
                self._vbfollow_()
                self._token(' ')
                self._pron_()
                self._token(' and ')
                self._vbguide_()
                self._token(' ')
                self._pron_()
                self._token(' back')
            self._error('no available options')

    @graken()
    def _incomplete_(self):
        with self._choice():
            with self._option():
                self._vbfollow_()
                self._token(' ')
                self._name_()
            with self._option():
                self._vbbring_()
                self._token(' me the ')
                self._category_()
            with self._option():
                self._vbdeliver_()
                self._token(' ')
                self._category_()
                self._token(' to ')
                self._someone_()
            with self._option():
                self._vbguide_()
                self._token(' ')
                self._name_()
                self._token(' to the ')
                self._beacon_()
            with self._option():
                self._token('meet ')
                self._inguidewho_()
                self._token(' and ')
                self._vbguide_()
                self._token(' ')
                self._pron_()
            with self._option():
                self._gobeacon_()
                self._token(' meet ')
                self._inguidewho_()
                self._token(' and ')
                self._vbguide_()
                self._token(' ')
                self._pron_()
            self._error('no available options')

    @graken()
    def _man_(self):
        self._deliver_()

    @graken()
    def _complexman_(self):
        self._cmancmd_()

    @graken()
    def _partyhost_(self):
        with self._choice():
            with self._option():
                self._vbserve_()
                self._token(' ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('drinks')
                        with self._option():
                            self._token('snacks')
                        self._error('expecting one of: drinks snacks')
                self._token(' to ')
                self._phpeopler_()
            with self._option():
                self._vbmeet_()
                self._token(' ')
                self._name_()
                self._token(' at the ')
                self._door_()
                self._token(' and introduce ')
                self._pron_()
                self._token(' to ')
                self._phpeopler_()
            with self._option():
                self._vbmeet_()
                self._token(' ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' and ask ')
                self._pron_()
                self._token(' to leave')
            with self._option():
                self._vbmeet_()
                self._token(' ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' and introduce ')
                self._pron_()
                self._token(' to ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
            with self._option():
                self._vbmeet_()
                self._token(' ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' and ')
                self._vbguide_()
                self._token(' ')
                self._pron_()
                self._token(' to ')
                self._pron_()
                self._token(' ')
                self._taxi_()
            self._error('no available options')

    @graken()
    def _pgenderp_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('men')
                with self._option():
                    self._token('women')
                with self._option():
                    self._token('boys')
                with self._option():
                    self._token('girls')
                with self._option():
                    self._token('male')
                with self._option():
                    self._token('female')
                self._error('expecting one of: boys female girls male men women')

    @graken()
    def _pose_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('sitting')
                with self._option():
                    self._token('standing')
                with self._option():
                    self._token('lying down')
                self._error('expecting one of: lying down sitting standing')

    @graken()
    def _talk_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._answer_()
                with self._option():
                    self._speak_()
                self._error('no available options')

    @graken()
    def _whowhere_(self):
        self._token('the person ')
        self._gesture_()
        self._token(' in the ')
        self._room_()

    @graken()
    def _findp_(self):
        with self._choice():
            with self._option():
                self._vbfind_()
                self._token(' a ')
                self._pgenders_()
            with self._option():
                self._vbfind_()
                self._token(' a person ')
                self._gesture_()
            with self._option():
                self._vbfind_()
                self._token(' a person ')
                self._pose_()
            self._error('no available options')

    @graken()
    def _goroom_(self):
        self._vbgopl_()
        self._token(' to the ')
        self._room_()

    @graken()
    def _vbfind_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('find')
                with self._option():
                    self._token('locate')
                with self._option():
                    self._token('look for')
                self._error('expecting one of: find locate look for')

    @graken()
    def _oprop_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('biggest')
                with self._option():
                    self._token('largest')
                with self._option():
                    self._token('smallest')
                with self._option():
                    self._token('heaviest')
                with self._option():
                    self._token('lightest')
                with self._option():
                    self._token('thinnest')
                self._error('expecting one of: biggest heaviest largest lightest smallest thinnest')

    @graken()
    def _gdcmd_(self):
        with self._choice():
            with self._option():
                self._vbguide_()
                self._token(' ')
                self._name_()
                self._token(' from the ')
                self._beacon_()
                self._token(' to the ')
                self._beacon_()
            with self._option():
                self._token('meet ')
                self._name_()
                self._token(' at the ')
                self._beacon_()
                self._token(' and ')
                self._guideto_()
            with self._option():
                self._gobeacon_()
                self._token(' meet ')
                self._name_()
                self._token(' and ')
                self._guideto_()
            with self._option():
                self._vbguide_()
                self._token(' ')
                self._name_()
                self._token(' to the ')
                self._beacon_()
                self._token(' ')
                self._gdwhere_()
            self._error('no available options')

    @graken()
    def _vbfollow_(self):
        self._token('follow')

    @graken()
    def _fllwdest_(self):
        with self._group():
            self._token('to the ')
            self._room_()

    @graken()
    def _gobeacon_(self):
        self._vbgopl_()
        self._token(' to the ')
        self._beacon_()

    @graken()
    def _vbguide_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('guide')
                with self._option():
                    self._token('escort')
                with self._option():
                    self._token('take')
                with self._option():
                    self._token('lead')
                with self._option():
                    self._token('accompany')
                self._error('expecting one of: accompany escort guide lead take')

    @graken()
    def _vbbring_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('bring')
                with self._option():
                    self._token('give')
                self._error('expecting one of: bring give')

    @graken()
    def _vbdeliver_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._vbbring_()
                with self._option():
                    self._token('deliver')
                self._error('expecting one of: deliver')

    @graken()
    def _someone_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('me')
                with self._option():
                    self._whowhere_()
                self._error('expecting one of: me')

    @graken()
    def _inguidewho_(self):
        self._name_()

    @graken()
    def _deliver_(self):
        with self._choice():
            with self._option():
                self._vbbtake_()
                self._token(' the ')
                self._aobject_()
                self._token(' from the ')
                self._room_()
                self._token(' to the ')
                self._placement_()
            with self._option():
                self._vbbring_()
                self._token(' me the ')
                self._aobject_()
                self._token(' from the ')
                self._placement_()
            with self._option():
                self._takefrom_()
                self._token(' and ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._delivme_()
                        with self._option():
                            self._delivat_()
                        self._error('no available options')
            with self._option():
                self._takefrom_()
                self._token(' and ')
                self._place_()
            with self._option():
                self._vbbtake_()
                self._token(' my ')
                self._luggage_()
                self._token(' to the ')
                self._taxi_()
            with self._option():
                self._take_()
                self._token(' and ')
                self._vbplace_()
                self._token(' it on the ')
                self._placement_()
            with self._option():
                self._vbplace_()
                self._token(' the ')
                self._object_()
                self._token(' on the ')
                self._placement_()
            with self._option():
                self._vbbring_()
                self._token(' me the ')
                self._object_()
            with self._option():
                self._vbdeliver_()
                self._token(' the ')
                self._object_()
                self._token(' to ')
                self._someone_()
            with self._option():
                self._takefrom_()
                self._token(' and ')
                self._vbplace_()
                self._token(' it on the ')
                self._placement_()
            with self._option():
                self._goplace_()
                self._token(' ')
                self._vbfind_()
                self._token(' the ')
                self._object_()
                self._token(' and ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._delivme_()
                        with self._option():
                            self._delivat_()
                        self._error('no available options')
            with self._option():
                self._goplace_()
                self._token(' ')
                self._vbfind_()
                self._token(' the ')
                self._object_()
                self._token(' and ')
                self._place_()
            self._error('no available options')

    @graken()
    def _cmancmd_(self):
        with self._choice():
            with self._option():
                self._vbbtake_()
                self._token(' the ')
                self._kobject_()
                self._token(' to the ')
                self._placement_()
            with self._option():
                self._vbbring_()
                self._token(' me the ')
                self._abspos_()
                self._token(' object ')
                self._cmanobjsrc_()
            with self._option():
                self._vbbring_()
                self._token(' me the object ')
                self._relpos_()
                self._token(' the ')
                self._object_()
                self._token('  ')
                self._cmanobjsrc_()
            with self._option():
                self._vbbring_()
                self._token(' me the ')
                self._oprop_()
                self._token(' ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('object')
                        with self._option():
                            self._category_()
                        self._error('expecting one of: object')
                self._token(' ')
                self._cmanobjsrc_()
            with self._option():
                self._vbcleanup_()
                self._token(' the ')
                self._room_()
            with self._option():
                self._vbtakeout_()
                self._token(' the ')
                self._garbage_()
            self._error('no available options')

    @graken()
    def _vbserve_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('serve')
                with self._option():
                    self._token('arrange')
                with self._option():
                    self._token('deliver')
                with self._option():
                    self._token('distribute')
                with self._option():
                    self._token('give')
                with self._option():
                    self._token('provide')
                self._error('expecting one of: arrange deliver distribute give provide serve')

    @graken()
    def _phpeopler_(self):
        self._phpeople_()
        self._token(' in the ')
        self._room_()

    @graken()
    def _vbmeet_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('contact')
                with self._option():
                    self._token('face')
                with self._option():
                    self._token('find')
                with self._option():
                    self._token('greet')
                self._error('expecting one of: contact face find greet')

    @graken()
    def _door_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('front')
                with self._option():
                    self._token('back')
                with self._option():
                    self._token('main')
                with self._option():
                    self._token('rear')
                self._error('expecting one of: back front main rear')
        self._token(' ')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('entrance')
                with self._option():
                    self._token('door')
                self._error('expecting one of: door entrance')

    @graken()
    def _taxi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('taxi')
                with self._option():
                    self._token('cab')
                with self._option():
                    self._token('uber')
                self._error('expecting one of: cab taxi uber')

    @graken()
    def _answer_(self):
        self._token('answer a ')
        self._question_()

    @graken()
    def _speak_(self):
        self._vbspeak_()
        self._token(' ')
        self._whattosay_()

    @graken()
    def _pgenders_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('man')
                with self._option():
                    self._token('woman')
                with self._option():
                    self._token('boy')
                with self._option():
                    self._token('girl')
                with self._option():
                    with self._group():
                        self._token('male person')
                with self._option():
                    with self._group():
                        self._token('female person')
                self._error('expecting one of: boy female person girl male person man woman')

    @graken()
    def _vbgopl_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('go')
                with self._option():
                    self._token('navigate')
                self._error('expecting one of: go navigate')

    @graken()
    def _guideto_(self):
        self._vbguide_()
        self._token(' ')
        self._pron_()
        self._token(' to the ')
        self._beacon_()

    @graken()
    def _gdwhere_(self):
        self._token('you ')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('may')
                with self._option():
                    self._token('can')
                with self._option():
                    self._token('will')
                self._error('expecting one of: can may will')
        self._token(' find ')
        self._pron_()
        self._token(' at the ')
        self._beacon_()

    @graken()
    def _vbbtake_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('bring')
                with self._option():
                    self._token('take')
                self._error('expecting one of: bring take')

    @graken()
    def _takefrom_(self):
        self._take_()
        self._token(' from the ')
        self._placement_()

    @graken()
    def _delivme_(self):
        self._vbdeliver_()
        self._token(' it to me')

    @graken()
    def _delivat_(self):
        self._vbdeliver_()
        self._token(' it to ')
        self._name_()
        self._token(' at the ')
        self._beacon_()

    @graken()
    def _place_(self):
        self._vbplace_()
        self._token(' it on the ')
        self._placement_()

    @graken()
    def _luggage_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('bag')
                with self._option():
                    self._token('baggage')
                with self._option():
                    self._token('valise')
                with self._option():
                    self._token('suitcase')
                with self._option():
                    self._token('trolley')
                self._error('expecting one of: bag baggage suitcase trolley valise')

    @graken()
    def _take_(self):
        self._vbtake_()
        self._token(' the ')
        self._object_()

    @graken()
    def _vbplace_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('put')
                with self._option():
                    self._token('place')
                self._error('expecting one of: place put')

    @graken()
    def _goplace_(self):
        self._vbgopl_()
        self._token(' to the ')
        self._placement_()

    @graken()
    def _abspos_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('left')
                with self._option():
                    self._token('right')
                self._error('expecting one of: left right')
        self._token(' most')

    @graken()
    def _cmanobjsrc_(self):
        self._token('from the ')
        self._placement_()

    @graken()
    def _relpos_(self):
        with self._choice():
            with self._option():
                self._token('at the ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('left')
                        with self._option():
                            self._token('right')
                        self._error('expecting one of: left right')
                self._token(' of')
            with self._option():
                self._token('on top of')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('above')
                        with self._option():
                            self._token('behind')
                        with self._option():
                            self._token('under')
                        self._error('expecting one of: above behind under')
            self._error('expecting one of: above at the  behind on top of under')

    @graken()
    def _vbcleanup_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('clean out')
                with self._option():
                    with self._group():
                        self._token('clean up')
                with self._option():
                    with self._group():
                        self._token('tidy op')
                with self._option():
                    self._token('neaten')
                with self._option():
                    self._token('order')
                self._error('expecting one of: clean out clean up neaten order tidy op')

    @graken()
    def _vbtakeout_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('take out')
                with self._option():
                    self._token('dump')
                self._error('expecting one of: dump take out')

    @graken()
    def _garbage_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('litter')
                with self._option():
                    self._token('garbage')
                with self._option():
                    self._token('trash')
                with self._option():
                    self._token('waste')
                with self._option():
                    self._token('debris')
                with self._option():
                    self._token('junk')
                self._error('expecting one of: debris garbage junk litter trash waste')

    @graken()
    def _phpeople_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('everyone')
                with self._option():
                    with self._group():
                        self._token('all the ')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._token('people')
                                with self._option():
                                    self._token('men')
                                with self._option():
                                    self._token('women')
                                with self._option():
                                    self._token('guests')
                                with self._option():
                                    self._token('elders')
                                with self._option():
                                    self._token('children')
                                self._error('expecting one of: children elders guests men people women')
                self._error('expecting one of: all the  everyone')

    @graken()
    def _vbspeak_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('tell')
                with self._option():
                    self._token('say')
                self._error('expecting one of: say tell')

    @graken()
    def _whattosay_(self):
        with self._choice():
            with self._option():
                self._token('something about yourself')
            with self._option():
                self._token('the time')
            with self._option():
                self._token('what day is ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('today')
                        with self._option():
                            self._token('tomorrow')
                        self._error('expecting one of: today tomorrow')
            with self._option():
                self._token('your teams ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('name')
                        with self._option():
                            self._token('country')
                        with self._option():
                            self._token('affiliation')
                        self._error('expecting one of: affiliation country name')
            with self._option():
                self._token('the day of the ')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('week')
                        with self._option():
                            self._token('month')
                        self._error('expecting one of: month week')
            with self._option():
                self._token('a joke')
            self._error('expecting one of: a joke something about yourself the day of the  the time what day is  your teams ')

    @graken()
    def _vbtake_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('get')
                with self._option():
                    self._token('grasp')
                with self._option():
                    self._token('take')
                with self._option():
                    self._token('pick up')
                self._error('expecting one of: get grasp pick up take')

    @graken()
    def _pron_(self):
        with self._choice():
            with self._option():
                self._token('it')
            with self._option():
                self._token('our')
            with self._option():
                self._token('your')
            with self._option():
                self._token('her')
            with self._option():
                self._token('its')
            with self._option():
                self._token('their')
            with self._option():
                self._token('ours')
            with self._option():
                self._token('you')
            with self._option():
                self._token('we')
            with self._option():
                self._token('his')
            with self._option():
                self._token('I')
            with self._option():
                self._token('mine')
            with self._option():
                self._token('them')
            with self._option():
                self._token('they')
            with self._option():
                self._token('hers')
            with self._option():
                self._token('him')
            with self._option():
                self._token('he')
            with self._option():
                self._token('me')
            with self._option():
                self._token('theirs')
            with self._option():
                self._token('us')
            with self._option():
                self._token('she')
            with self._option():
                self._token('my')
            with self._option():
                self._token('yours')
            self._error('expecting one of: I he her hers him his it its me mine my our ours she their theirs them they us we you your yours')

    @graken()
    def _gesture_(self):
        with self._choice():
            with self._option():
                self._token('waving')
            with self._option():
                self._token('raising their left arm')
            with self._option():
                self._token('raising their right arm')
            with self._option():
                self._token('pointing to the left')
            with self._option():
                self._token('pointing to the right')
            self._error('expecting one of: pointing to the left pointing to the right raising their left arm raising their right arm waving')

    @graken()
    def _location_(self):
        with self._choice():
            with self._option():
                self._room_()
            with self._option():
                self._placement_()
            with self._option():
                self._beacon_()
            self._error('no available options')

    @graken()
    def _room_(self):
        with self._choice():
            with self._option():
                self._token('corridor')
            with self._option():
                self._token('bedroom')
            with self._option():
                self._token('dining room')
            with self._option():
                self._token('living room')
            with self._option():
                self._token('kitchen')
            self._error('expecting one of: bedroom corridor dining room kitchen living room')

    @graken()
    def _placement_(self):
        with self._choice():
            with self._option():
                self._token('side table')
            with self._option():
                self._token('desk')
            with self._option():
                self._token('dining table')
            with self._option():
                self._token('end table')
            with self._option():
                self._token('bookcase')
            with self._option():
                self._token('cupboard')
            with self._option():
                self._token('storage table')
            with self._option():
                self._token('sink')
            with self._option():
                self._token('counter')
            self._error('expecting one of: bookcase counter cupboard desk dining table end table side table sink storage table')

    @graken()
    def _beacon_(self):
        with self._choice():
            with self._option():
                self._token('entrance')
            with self._option():
                self._token('bed')
            with self._option():
                self._token('desk')
            with self._option():
                self._token('dining table')
            with self._option():
                self._token('exit')
            with self._option():
                self._token('couch')
            with self._option():
                self._token('end table')
            with self._option():
                self._token('bookcase')
            with self._option():
                self._token('sink')
            with self._option():
                self._token('dishwasher')
            self._error('expecting one of: bed bookcase couch desk dining table dishwasher end table entrance exit sink')

    @graken()
    def _name_(self):
        with self._choice():
            with self._option():
                self._male_()
            with self._option():
                self._female_()
            self._error('no available options')

    @graken()
    def _male_(self):
        with self._choice():
            with self._option():
                self._token('alex')
            with self._option():
                self._token('charlie')
            with self._option():
                self._token('francis')
            with self._option():
                self._token('james')
            with self._option():
                self._token('john')
            with self._option():
                self._token('michael')
            with self._option():
                self._token('robert')
            with self._option():
                self._token('robin')
            with self._option():
                self._token('skyler')
            with self._option():
                self._token('william')
            self._error('expecting one of: alex charlie francis james john michael robert robin skyler william')

    @graken()
    def _female_(self):
        with self._choice():
            with self._option():
                self._token('alex')
            with self._option():
                self._token('charlie')
            with self._option():
                self._token('elizabeth')
            with self._option():
                self._token('francis')
            with self._option():
                self._token('jennifer')
            with self._option():
                self._token('linda')
            with self._option():
                self._token('mary')
            with self._option():
                self._token('patricia')
            with self._option():
                self._token('robin')
            with self._option():
                self._token('skyler')
            self._error('expecting one of: alex charlie elizabeth francis jennifer linda mary patricia robin skyler')

    @graken()
    def _category_(self):
        with self._choice():
            with self._option():
                self._token('cleaning stuff')
            with self._option():
                self._token('containers')
            with self._option():
                self._token('cutlery')
            with self._option():
                self._token('drinks')
            with self._option():
                self._token('food')
            with self._option():
                self._token('fruits')
            with self._option():
                self._token('snacks')
            with self._option():
                self._token('tableware')
            self._error('expecting one of: cleaning stuff containers cutlery drinks food fruits snacks tableware')

    @graken()
    def _object_(self):
        with self._choice():
            with self._option():
                self._kobject_()
            with self._option():
                self._aobject_()
            with self._option():
                self._sobject_()
            self._error('no available options')

    @graken()
    def _kobject_(self):
        with self._choice():
            with self._option():
                self._token('cloth')
            with self._option():
                self._token('scrubby')
            with self._option():
                self._token('sponge')
            with self._option():
                self._token('cascade pod')
            with self._option():
                self._token('fork')
            with self._option():
                self._token('knife')
            with self._option():
                self._token('spoon')
            with self._option():
                self._token('chocolate drink')
            with self._option():
                self._token('coke')
            with self._option():
                self._token('grape juice')
            with self._option():
                self._token('orange juice')
            with self._option():
                self._token('sprite')
            with self._option():
                self._token('cereal')
            with self._option():
                self._token('noodles')
            with self._option():
                self._token('sausages')
            with self._option():
                self._token('pringles')
            with self._option():
                self._token('crackers')
            with self._option():
                self._token('potato chips')
            with self._option():
                self._token('dish')
            with self._option():
                self._token('bowl')
            with self._option():
                self._token('cup')
            self._error('expecting one of: bowl cascade pod cereal chocolate drink cloth coke crackers cup dish fork grape juice knife noodles orange juice potato chips pringles sausages scrubby sponge spoon sprite')

    @graken()
    def _aobject_(self):
        with self._choice():
            with self._option():
                self._token('apple')
            with self._option():
                self._token('orange')
            with self._option():
                self._token('paprika')
            self._error('expecting one of: apple orange paprika')

    @graken()
    def _sobject_(self):
        with self._choice():
            with self._option():
                self._token('tray')
            with self._option():
                self._token('basket')
            with self._option():
                self._token('bag')
            self._error('expecting one of: bag basket tray')

    @graken()
    def _question_(self):
        self._token('question')


class GPSRSemantics(object):
    def s(self, ast):
        return ast

    def start(self, ast):
        return ast

    def pmain(self, ast):
        return ast

    def main(self, ast):
        return ast

    def polite(self, ast):
        return ast

    def fndppl(self, ast):
        return ast

    def fndobj(self, ast):
        return ast

    def guide(self, ast):
        return ast

    def follow(self, ast):
        return ast

    def followout(self, ast):
        return ast

    def incomplete(self, ast):
        return ast

    def man(self, ast):
        return ast

    def complexman(self, ast):
        return ast

    def partyhost(self, ast):
        return ast

    def pgenderp(self, ast):
        return ast

    def pose(self, ast):
        return ast

    def talk(self, ast):
        return ast

    def whowhere(self, ast):
        return ast

    def findp(self, ast):
        return ast

    def goroom(self, ast):
        return ast

    def vbfind(self, ast):
        return ast

    def oprop(self, ast):
        return ast

    def gdcmd(self, ast):
        return ast

    def vbfollow(self, ast):
        return ast

    def fllwdest(self, ast):
        return ast

    def gobeacon(self, ast):
        return ast

    def vbguide(self, ast):
        return ast

    def vbbring(self, ast):
        return ast

    def vbdeliver(self, ast):
        return ast

    def someone(self, ast):
        return ast

    def inguidewho(self, ast):
        return ast

    def deliver(self, ast):
        return ast

    def cmancmd(self, ast):
        return ast

    def vbserve(self, ast):
        return ast

    def phpeopler(self, ast):
        return ast

    def vbmeet(self, ast):
        return ast

    def door(self, ast):
        return ast

    def taxi(self, ast):
        return ast

    def answer(self, ast):
        return ast

    def speak(self, ast):
        return ast

    def pgenders(self, ast):
        return ast

    def vbgopl(self, ast):
        return ast

    def guideto(self, ast):
        return ast

    def gdwhere(self, ast):
        return ast

    def vbbtake(self, ast):
        return ast

    def takefrom(self, ast):
        return ast

    def delivme(self, ast):
        return ast

    def delivat(self, ast):
        return ast

    def place(self, ast):
        return ast

    def luggage(self, ast):
        return ast

    def take(self, ast):
        return ast

    def vbplace(self, ast):
        return ast

    def goplace(self, ast):
        return ast

    def abspos(self, ast):
        return ast

    def cmanobjsrc(self, ast):
        return ast

    def relpos(self, ast):
        return ast

    def vbcleanup(self, ast):
        return ast

    def vbtakeout(self, ast):
        return ast

    def garbage(self, ast):
        return ast

    def phpeople(self, ast):
        return ast

    def vbspeak(self, ast):
        return ast

    def whattosay(self, ast):
        return ast

    def vbtake(self, ast):
        return ast

    def pron(self, ast):
        return ast

    def gesture(self, ast):
        return ast

    def location(self, ast):
        return ast

    def room(self, ast):
        return ast

    def placement(self, ast):
        return ast

    def beacon(self, ast):
        return ast

    def name(self, ast):
        return ast

    def male(self, ast):
        return ast

    def female(self, ast):
        return ast

    def category(self, ast):
        return ast

    def object(self, ast):
        return ast

    def kobject(self, ast):
        return ast

    def aobject(self, ast):
        return ast

    def sobject(self, ast):
        return ast

    def question(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = GPSRParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, GPSRParser, name='GPSR')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
